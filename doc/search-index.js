var searchIndex={};
searchIndex["indextree"] = {"doc":"Arena based tree data structure","i":[[3,"Arena","indextree","An `Arena` structure containing certain [`Node`]s.",null,null],[3,"NodeId","","A node identifier within a particular [`Arena`].",null,null],[3,"Node","","A node within a particular `Arena`.",null,null],[3,"Ancestors","","An iterator of the IDs of the ancestors a given node.",null,null],[3,"Children","","An iterator of the IDs of the children of a given node, in…",null,null],[3,"Descendants","","An iterator of the IDs of a given node and its…",null,null],[3,"FollowingSiblings","","An iterator of the IDs of the siblings after a given node.",null,null],[3,"PrecedingSiblings","","An iterator of the IDs of the siblings before a given node.",null,null],[3,"ReverseChildren","","An iterator of the IDs of the children of a given node, in…",null,null],[3,"ReverseTraverse","","An iterator of the \"sides\" of a node visited during a…",null,null],[3,"Traverse","","An iterator of the \"sides\" of a node visited during a…",null,null],[4,"NodeError","","Possible node failures.",null,null],[13,"AppendSelf","","Attempt to append a node to itself.",0,null],[13,"PrependSelf","","Attempt to prepend a node to itself.",0,null],[13,"InsertBeforeSelf","","Attempt to insert a node before itself.",0,null],[13,"InsertAfterSelf","","Attempt to insert a node after itself.",0,null],[13,"Removed","","Attempt to insert a removed node, or insert to a removed…",0,null],[4,"NodeEdge","","Indicator if the node is at a start or endpoint of the tree",null,null],[13,"Start","","Indicates that start of a node that has children.",1,null],[13,"End","","Indicates that end of a node that has children.",1,null],[11,"new","","Creates a new empty `Arena`.",2,[[],["arena"]]],[11,"new_node","","Creates a new node from its associated data.",2,[[["self"],["t"]],["nodeid"]]],[11,"count","","Counts the number of nodes in arena and returns it.",2,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if arena has no nodes, `false` otherwise.",2,[[["self"]],["bool"]]],[11,"get","","Returns a reference to the node with the given id if in…",2,[[["self"],["nodeid"]],[["option",["node"]],["node"]]]],[11,"get_mut","","Returns a mutable reference to the node with the given id…",2,[[["self"],["nodeid"]],[["option",["node"]],["node"]]]],[11,"iter","","Returns an iterator of all nodes in the arena in…",2,[[["self"]]]],[11,"ancestors","","Returns an iterator of IDs of this node and its ancestors.",3,[[["arena"]],["ancestors"]]],[11,"preceding_siblings","","Returns an iterator of IDs of this node and the siblings…",3,[[["arena"]],["precedingsiblings"]]],[11,"following_siblings","","Returns an iterator of IDs of this node and the siblings…",3,[[["arena"]],["followingsiblings"]]],[11,"children","","Returns an iterator of IDs of this node’s children.",3,[[["arena"]],["children"]]],[11,"reverse_children","","Returns an iterator of IDs of this node’s children, in…",3,[[["arena"]],["reversechildren"]]],[11,"descendants","","An iterator of the IDs of a given node and its…",3,[[["arena"]],["descendants"]]],[11,"traverse","","An iterator of the \"sides\" of a node visited during a…",3,[[["arena"]],["traverse"]]],[11,"reverse_traverse","","An iterator of the \"sides\" of a node visited during a…",3,[[["arena"]],["reversetraverse"]]],[11,"detach","","Detaches a node from its parent and siblings. Children are…",3,[[["arena"]]]],[11,"append","","Appends a new child to this node, after existing children.",3,[[["arena"],["nodeid"]]]],[11,"checked_append","","Appends a new child to this node, after existing children.",3,[[["arena"],["nodeid"]],[["nodeerror"],["result",["nodeerror"]]]]],[11,"prepend","","Prepends a new child to this node, before existing children.",3,[[["arena"],["nodeid"]]]],[11,"checked_prepend","","Prepends a new child to this node, before existing children.",3,[[["arena"],["nodeid"]],[["nodeerror"],["result",["nodeerror"]]]]],[11,"insert_after","","Inserts a new sibling after this node.",3,[[["arena"],["nodeid"]]]],[11,"checked_insert_after","","Inserts a new sibling after this node.",3,[[["arena"],["nodeid"]],[["nodeerror"],["result",["nodeerror"]]]]],[11,"insert_before","","Inserts a new sibling before this node.",3,[[["arena"],["nodeid"]]]],[11,"checked_insert_before","","Inserts a new sibling before this node.",3,[[["arena"],["nodeid"]],[["nodeerror"],["result",["nodeerror"]]]]],[11,"remove","","Removes a node from the arena.",3,[[["arena"]]]],[11,"get","","Returns a reference to the node data.",4,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the node data.",4,[[["self"]],["t"]]],[11,"parent","","Returns the ID of the parent node, unless this node is the…",4,[[["self"]],[["option",["nodeid"]],["nodeid"]]]],[11,"first_child","","Returns the ID of the first child of this node, unless it…",4,[[["self"]],[["option",["nodeid"]],["nodeid"]]]],[11,"last_child","","Returns the ID of the last child of this node, unless it…",4,[[["self"]],[["option",["nodeid"]],["nodeid"]]]],[11,"previous_sibling","","Returns the ID of the previous sibling of this node,…",4,[[["self"]],[["option",["nodeid"]],["nodeid"]]]],[11,"next_sibling","","Returns the ID of the next sibling of this node, unless it…",4,[[["self"]],[["option",["nodeid"]],["nodeid"]]]],[11,"is_removed","","Checks if the node is marked as removed.",4,[[["self"]],["bool"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"into_iter","","",5,[[],["i"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"into_iter","","",6,[[],["i"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"into_iter","","",7,[[],["i"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"into_iter","","",8,[[],["i"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"into_iter","","",9,[[],["i"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"into_iter","","",10,[[],["i"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"into_iter","","",11,[[],["i"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"into_iter","","",12,[[],["i"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"into","","",3,[[],["nonzerousize"]]],[11,"into","","",3,[[],["usize"]]],[11,"next","","",5,[[["self"]],[["option",["nodeid"]],["nodeid"]]]],[11,"next","","",9,[[["self"]],[["option",["nodeid"]],["nodeid"]]]],[11,"next","","",8,[[["self"]],[["option",["nodeid"]],["nodeid"]]]],[11,"next","","",6,[[["self"]],[["option",["nodeid"]],["nodeid"]]]],[11,"next","","",10,[[["self"]],[["option",["nodeid"]],["nodeid"]]]],[11,"next","","",7,[[["self"]],[["option",["nodeid"]],["nodeid"]]]],[11,"next","","",12,[[["self"]],[["option",["nodeedge"]],["nodeedge"]]]],[11,"next","","",11,[[["self"]],[["option",["nodeedge"]],["nodeedge"]]]],[11,"clone","","",2,[[["self"]],["arena"]]],[11,"clone","","",0,[[["self"]],["nodeerror"]]],[11,"clone","","",3,[[["self"]],["nodeid"]]],[11,"clone","","",4,[[["self"]],["node"]]],[11,"clone","","",5,[[["self"]],["ancestors"]]],[11,"clone","","",9,[[["self"]],["precedingsiblings"]]],[11,"clone","","",8,[[["self"]],["followingsiblings"]]],[11,"clone","","",6,[[["self"]],["children"]]],[11,"clone","","",10,[[["self"]],["reversechildren"]]],[11,"clone","","",7,[[["self"]],["descendants"]]],[11,"clone","","",1,[[["self"]],["nodeedge"]]],[11,"clone","","",12,[[["self"]],["traverse"]]],[11,"clone","","",11,[[["self"]],["reversetraverse"]]],[11,"default","","",2,[[],["self"]]],[11,"cmp","","",3,[[["nodeid"],["self"]],["ordering"]]],[11,"eq","","",2,[[["self"],["arena"]],["bool"]]],[11,"ne","","",2,[[["self"],["arena"]],["bool"]]],[11,"eq","","",3,[[["nodeid"],["self"]],["bool"]]],[11,"ne","","",3,[[["nodeid"],["self"]],["bool"]]],[11,"eq","","",4,[[["self"],["node"]],["bool"]]],[11,"ne","","",4,[[["self"],["node"]],["bool"]]],[11,"eq","","",1,[[["nodeedge"],["self"]],["bool"]]],[11,"ne","","",1,[[["nodeedge"],["self"]],["bool"]]],[11,"partial_cmp","","",3,[[["nodeid"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",3,[[["nodeid"],["self"]],["bool"]]],[11,"le","","",3,[[["nodeid"],["self"]],["bool"]]],[11,"gt","","",3,[[["nodeid"],["self"]],["bool"]]],[11,"ge","","",3,[[["nodeid"],["self"]],["bool"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"index","","",2,[[["self"],["nodeid"]],["node"]]],[11,"index_mut","","",2,[[["self"],["nodeid"]],["node"]]],[11,"hash","","",3,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]]],"p":[[4,"NodeError"],[4,"NodeEdge"],[3,"Arena"],[3,"NodeId"],[3,"Node"],[3,"Ancestors"],[3,"Children"],[3,"Descendants"],[3,"FollowingSiblings"],[3,"PrecedingSiblings"],[3,"ReverseChildren"],[3,"ReverseTraverse"],[3,"Traverse"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);